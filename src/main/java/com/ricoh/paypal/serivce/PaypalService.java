package com.ricoh.paypal.serivce;import cn.hutool.http.HttpRequest;import cn.hutool.http.HttpResponse;import cn.hutool.http.HttpUtil;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.braintreegateway.BraintreeGateway;import com.fasterxml.jackson.core.JsonProcessingException;import com.fasterxml.jackson.databind.ObjectMapper;import com.paypal.api.payments.*;import com.paypal.api.payments.Links;import com.paypal.base.Constants;import com.paypal.base.rest.APIContext;import com.paypal.base.rest.PayPalRESTException;import com.paypal.core.PayPalEnvironment;import com.paypal.core.PayPalHttpClient;import com.ricoh.paypal.config.PaypalPaymentIntent;import com.ricoh.paypal.config.PaypalPaymentMethod;import com.ricoh.paypal.pojo.*;import com.ricoh.paypal.pojo.product.Product;import com.ricoh.paypal.pojo.subscription.*;import com.ricoh.paypal.pojo.subscription.Address;import com.ricoh.paypal.pojo.subscription.ShippingAddress;import lombok.extern.slf4j.Slf4j;import org.apache.commons.httpclient.HttpClient;import org.apache.commons.httpclient.methods.PostMethod;import org.apache.commons.httpclient.methods.StringRequestEntity;import org.apache.http.HttpEntity;import org.apache.http.auth.AuthScope;import org.apache.http.auth.UsernamePasswordCredentials;import org.apache.http.client.ClientProtocolException;import org.apache.http.client.CredentialsProvider;import org.apache.http.client.entity.UrlEncodedFormEntity;import org.apache.http.client.methods.CloseableHttpResponse;import org.apache.http.client.methods.HttpPost;import org.apache.http.entity.StringEntity;import org.apache.http.impl.client.BasicCredentialsProvider;import org.apache.http.impl.client.CloseableHttpClient;import org.apache.http.impl.client.HttpClients;import org.apache.http.message.BasicNameValuePair;import org.apache.http.util.EntityUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.thymeleaf.util.StringUtils;import javax.servlet.http.HttpServletRequest;import javax.xml.bind.DatatypeConverter;import java.io.*;import java.nio.charset.Charset;import java.security.NoSuchAlgorithmException;import java.security.SignatureException;import java.time.LocalDateTime;import java.util.*;/** * @author xionglijing * @date 2021/9/26 17:20 * @description */@Service@Slf4jpublic class PaypalService{    @Autowired    private APIContext apiContext;    private static final String BASE_URL = "https://api-m.sandbox.paypal.com";    private static final String username = "AXf2oX4EoqruRI01MN3_wUe06oZBS8yUhOlQ61EIR1HuWA0itQrku5i54ejTeynCWvxFTHnZj1XKXq89";    private static final String password = "ENGJ74NZIE_wzOB0NGuHv7IzY4mOrEOhItIlqp6HzlFmO_b1gZgiONICv3OZkCTbOcc262sdUi7pBcIv";    public Payment createPayment(            Double total,            String currency,            PaypalPaymentMethod method,            PaypalPaymentIntent intent,            String description,            String cancelUrl,            String successUrl) throws PayPalRESTException{        Amount amount = new Amount();        amount.setCurrency(currency);        amount.setTotal(String.format("%.2f", total));        Transaction transaction = new Transaction();        transaction.setDescription(description);        transaction.setAmount(amount);        List<Transaction> transactions = new ArrayList<>();        transactions.add(transaction);        Payer payer = new Payer();        payer.setPaymentMethod(method.toString());        Payment payment = new Payment();        payment.setIntent(intent.toString());        payment.setPayer(payer);        payment.setTransactions(transactions);        RedirectUrls redirectUrls = new RedirectUrls();        redirectUrls.setCancelUrl(cancelUrl);        redirectUrls.setReturnUrl(successUrl);        payment.setRedirectUrls(redirectUrls);        return payment.create(apiContext);    }    public Payment executePayment(String paymentId, String payerId) throws PayPalRESTException {        Payment payment = new Payment();        payment.setId(paymentId);        PaymentExecution paymentExecute = new PaymentExecution();        paymentExecute.setPayerId(payerId);        return payment.execute(apiContext, paymentExecute);    }    /**     * 获取token     * @return     * @throws IOException     */    public String getToken() {        String body = HttpRequest.post(BASE_URL + "/v1/oauth2/token")                .basicAuth(username, password)                .form("grant_type", "client_credentials")                .execute().body();        JSONObject jsonObject = JSONObject.parseObject(body);        return jsonObject.get("access_token").toString();    }    /**     * 创建计划     * @param productId     * @return     * @throws JsonProcessingException     */    public String createPlan(String productId) throws JsonProcessingException {        String dateTime = LocalDateTime.now().toString();        String token = getToken();        Map<String,String> map = new HashMap<>(4);        map.put("Content-Type","application/json");        map.put("Authorization",token);//        map.put("PayPal-Request-Id","PLAN-18062019-001");        PayPalSubscriptionPlanParam planParam = new PayPalSubscriptionPlanParam();        List<BillingCycles> list = new ArrayList<>();        BillingCycles billingCycles = new BillingCycles();        billingCycles.setTenureType("REGULAR");        billingCycles.setSequence(1);        billingCycles.setTotalCycles(12);        //计费周期        Frequency frequency = new Frequency();        frequency.setIntervalUnit("DAY");        frequency.setIntervalCount(1);        PricingScheme pricingScheme = new PricingScheme();        pricingScheme.setVersion(1);        pricingScheme.setCreateTime(dateTime);        //定价        FixedPrice fixedPrice = new FixedPrice();        fixedPrice.setCurrencyCode("USD");        fixedPrice.setValue("100");        pricingScheme.setFixedPrice(fixedPrice);        billingCycles.setFrequency(frequency);        billingCycles.setPricingScheme(pricingScheme);        list.add(billingCycles);        // 付款偏好        PaymentPreferences paymentPreferences = new PaymentPreferences();        paymentPreferences.setAutoBillOutstanding(true);        paymentPreferences.setPaymentFailureThreshold(3);        paymentPreferences.setSetupFeeFailureAction("CANCEL");        SetupFee setupFee = new SetupFee();        setupFee.setCurrencyCode("USD");        setupFee.setValue("0");        paymentPreferences.setSetupFee(setupFee);        // 税率        Taxes taxes = new Taxes();        taxes.setInclusive(true);        taxes.setPercentage("0");        planParam.setTaxes(taxes);        planParam.setPaymentPreferences(paymentPreferences);        planParam.setBillingCycles(list);        planParam.setProductId(productId);        planParam.setName("test plan");        planParam.setStatus("ACTIVE");        planParam.setDescription("test");        planParam.setCreateTime(dateTime);        planParam.setUpdateTime(dateTime);        String string = new ObjectMapper().writeValueAsString(planParam);        System.out.println(string);//        System.out.println();        String body = HttpRequest.post(BASE_URL + "/v1/billing/plans")                .addHeaders(map)                .basicAuth(username,password)                .body(string)                .execute().body();        return body;    }    /**     * 创建商品     * @return     * @throws JsonProcessingException     */    public String createProduct() throws JsonProcessingException {        Product product = new Product();        product.setName("tc-004");        product.setCategory("BOOKS_PERIODICALS_AND_NEWSPAPERS");        product.setDescription("test product 4");        product.setHomeUrl("http://www.baidu.com/1");        product.setImageUrl("http://image.wangchao.net.cn/fengjing/1327205317794.jpg");        product.setType("SERVICE");        Map<String,String> map = new HashMap<>(4);        map.put("Content-Type","application/json");        map.put("Authorization",getToken());//        map.put("PayPal-Request-Id","PLAN-18062019-001");        String string = new ObjectMapper().writeValueAsString(product);        String body = HttpRequest.post(BASE_URL + "/v1/catalogs/products")                .addHeaders(map)                .basicAuth(username,password)                .body(string)                .execute().body();//        System.out.println(body);        return body;    }    public String getPlanList() {        Map<String,String> map = new HashMap<>(4);        map.put("Content-Type","application/json");        String productId = "PROD-9SS11230NX051432D";        Map<String,Object> formMap = new HashMap<>(4);        formMap.put("product_id",productId);        formMap.put("page_size",10);        formMap.put("page",1);        formMap.put("total_required",true);        return HttpRequest.get(BASE_URL + "/v1/billing/plans")                .addHeaders(map)                .basicAuth(username,password)                .form(formMap)                .execute().body();    }    /**     * 创建订阅     * @param planId     * @return     */    public String createSubscription(String planId) {        Map<String,String> map = new HashMap<>(4);        map.put("Content-Type","application/json");        map.put("Authorization",getToken());        // P-7EG815794T029494CMFR77TA//        String planId = "P-4ND94871NA4029913MFSTSXI";        String string = handlerSubsParam(planId);        String body = HttpRequest.post(BASE_URL + "/v1/billing/subscriptions")                .addHeaders(map)                .basicAuth(username,password)                .body(string)                .execute().body();        JSONObject jsonObject = JSONObject.parseObject(body);        List<Links> links = JSONObject.parseArray(jsonObject.get("links").toString(), Links.class);        Links links1 = links.stream().filter(o -> "approve".equals(o.getRel())).findFirst()                .orElseThrow(() -> new RuntimeException("sadsadsada"));        System.out.println(JSONObject.toJSONString(links));        System.out.println(links1.getHref());        return body;    }    /**     * 处理订阅参数     *     * @param planId     * @return     */    private String handlerSubsParam(String planId) {        SubscriptionDTO subscriptionDTO = new SubscriptionDTO();        subscriptionDTO.setPlanId(planId);//        subscriptionDTO.setQuantity("10");//        subscriptionDTO.setShippingAmount("10");//        subscriptionDTO.setStartTime(new Date());//        subscriptionDTO.setQuantity("10");        Subscriber subscriber = new Subscriber();        SubscriberName subscriberName = new SubscriberName();        subscriberName.setGiven_name("lijing");        subscriberName.setSurname("xiong");        subscriber.setName(subscriberName);        subscriber.setEmailAddress("xiong.ricoh@gmail.com");        ShippingAddress shippingAddress = new ShippingAddress();        shippingAddress.setAddress(new Address("陕西省商洛市花坪镇油坊村梅子沟组101号","","","","","C2"));        shippingAddress.setName(new Name("xiong lijing"));        subscriber.setShippingAddress(shippingAddress);        subscriptionDTO.setSubscriber(subscriber);        ApplicationContext applicationContext = new ApplicationContext();//        applicationContext.setBrandName("");        applicationContext.setCancelUrl("http://www.baidu.com");//        applicationContext.setShippingPreference("");//        applicationContext.setUserAction("");        applicationContext.setReturnUrl("http://www.sina.com");        applicationContext.setPaymentMethod(new PaymentMethod());        subscriptionDTO.setApplicationContext(applicationContext);        String string = "";        try {            string = new ObjectMapper().writeValueAsString(subscriptionDTO);//            System.out.println(string);        } catch (JsonProcessingException e) {            e.printStackTrace();        }        return string;    }    public void updateProduct() {        System.out.println(HttpRequest.get("https://api.sandbox.paypal.com/v1/catalogs/products/PROD-73M89204L1314963L")                //                .addHeaders(map)                .basicAuth(username, password)                //                .body(string)                .execute().body());    }    public void createSubsBySDK() throws Exception {        String mode = "sandbox";        String webUrl = "https://www.sandbox.paypal.com";        APIContext context = new APIContext(username, password, mode);        Map<String,String> map = new HashMap<>(4);        map.put("Content-Type","application/json");        map.put("Authorization",context.fetchAccessToken());        /**         * Prefer 首选服务器在成功完成请求后做出响应。值是：         * return=minimal。服务器返回最小响应以优化API调用程序和服务器之间的通信。最小响应包括id，status和HATEOAS链接。         * return=representation。服务器返回完整的资源表示形式，包括资源的当前状态。         */        map.put("Prefer","return=representation");        HttpResponse response = HttpRequest.post(BASE_URL + "/v1/billing/subscriptions")                .addHeaders(map)                .body(handlerSubsParam("P-54083148R74596416MFUSEHY"))                .execute();        // 订阅正常创建        if (response.getStatus() == 201) {            JSONObject respObj = JSONObject.parseObject(response.body());            String resUrl = "";            JSONArray links = respObj.getJSONArray("links");            for (int i = 0; i < links.size(); i++) {                JSONObject link = links.getJSONObject(0);                if (StringUtils.equalsIgnoreCase(link.getString("rel"), "approve")) {                    resUrl = link.getString("href");                    System.out.println("paypal支付跳转链接为 ==> "+resUrl);                    break;                }            }        }    }    /**     * 创建多计划     * @param productId     * @return     * @throws JsonProcessingException     */    public String createPlanA(String productId) throws JsonProcessingException {        String dateTime = LocalDateTime.now().toString();        String token = getToken();        Map<String,String> map = new HashMap<>(4);        map.put("Content-Type","application/json");        map.put("Authorization",token);        PayPalSubscriptionPlanParam planParam = new PayPalSubscriptionPlanParam();        List<BillingCycles> list = new ArrayList<>();        BillingCycles billingCycles = new BillingCycles();        billingCycles.setTenureType("REGULAR");        billingCycles.setSequence(1);        billingCycles.setTotalCycles(12);        //计费周期        Frequency frequency = new Frequency();        frequency.setIntervalUnit("DAY");        frequency.setIntervalCount(1);        PricingScheme pricingScheme = new PricingScheme();        pricingScheme.setVersion(1);        pricingScheme.setCreateTime(dateTime);        //定价        FixedPrice fixedPrice = new FixedPrice();        fixedPrice.setCurrencyCode("USD");        fixedPrice.setValue("100");        pricingScheme.setFixedPrice(fixedPrice);        billingCycles.setFrequency(frequency);        billingCycles.setPricingScheme(pricingScheme);        list.add(billingCycles);        // 付款偏好        PaymentPreferences paymentPreferences = new PaymentPreferences();        paymentPreferences.setAutoBillOutstanding(true);        paymentPreferences.setPaymentFailureThreshold(3);        paymentPreferences.setSetupFeeFailureAction("CANCEL");        SetupFee setupFee = new SetupFee();        setupFee.setCurrencyCode("USD");        setupFee.setValue("0");        paymentPreferences.setSetupFee(setupFee);        // 税率        Taxes taxes = new Taxes();        taxes.setInclusive(true);        taxes.setPercentage("0");        planParam.setTaxes(taxes);        planParam.setPaymentPreferences(paymentPreferences);        planParam.setBillingCycles(list);        planParam.setProductId(productId);        planParam.setName("test plan a");        planParam.setStatus("ACTIVE");        planParam.setDescription("test");        planParam.setCreateTime(dateTime);        planParam.setUpdateTime(dateTime);        String string = new ObjectMapper().writeValueAsString(planParam);//        System.out.println(string);//        System.out.println();        String body = HttpRequest.post(BASE_URL + "/v1/billing/plans")                .addHeaders(map)                .basicAuth(username,password)                .body(string)                .execute().body();        return body;    }    public void verifyEventNotifications() {//        apiContext.addConfiguration(Constants.PAYPAL_WEBHOOK_ID, "5C350867YW4905623");//        Boolean result = Event.validateReceivedEvent(apiContext, getHeadersInfo(req), getBody(req));//        System.out.println("Result is " + result);//        log.info("Webhook Validated:  "//                + result);    }    // Simple helper method to help you extract the headers from HttpServletRequest object.    private static Map<String, String> getHeadersInfo(HttpServletRequest request) {        Map<String, String> map = new HashMap<String, String>();        @SuppressWarnings("rawtypes")        Enumeration headerNames = request.getHeaderNames();        while (headerNames.hasMoreElements()) {            String key = (String) headerNames.nextElement();            String value = request.getHeader(key);            map.put(key, value);        }        return map;    }    // Simple helper method to fetch request data as a string from HttpServletRequest object.    private static String getBody(HttpServletRequest request) throws IOException {        String body;        StringBuilder stringBuilder = new StringBuilder();        BufferedReader bufferedReader = null;        try {            InputStream inputStream = request.getInputStream();            if (inputStream != null) {                bufferedReader = new BufferedReader(new InputStreamReader(inputStream));                char[] charBuffer = new char[128];                int bytesRead = -1;                while ((bytesRead = bufferedReader.read(charBuffer)) > 0) {                    stringBuilder.append(charBuffer, 0, bytesRead);                }            } else {                stringBuilder.append("");            }        } catch (IOException ex) {            throw ex;        } finally {            if (bufferedReader != null) {                try {                    bufferedReader.close();                } catch (IOException ex) {                    throw ex;                }            }        }        body = stringBuilder.toString();        return body;    }    public static void main(String[] args) throws IOException {        PaypalService paypalService = new PaypalService();        System.out.println(paypalService.getToken());        // 创建商品//        System.out.println(paypalService.createProduct());//        paypalService.updateProduct();//        //创建计划//        String plan = paypalService.createPlan("PROD-8JS92778V4128604S");//        System.out.println(paypalService.createPlan("PROD-5TF26535CP994741R"));        //创建订阅//        System.out.println(paypalService.createSubscription("P-9F7394298U5816321MFX632Q"));//        try {//            paypalService.createSubsBySDK();//        } catch (Exception e) {//            e.printStackTrace();//        }//        System.out.println(paypalService.getPlanList());//        String 字符串 = "{\"status\":\"APPROVAL_PENDING\",\"id\":\"I-W0FVCUHFLDNJ\",\"create_time\":\"2021-10-20T10:22:59Z\",\"links\":[{\"href\":\"https://www.sandbox.paypal.com/webapps/billing/subscriptions?ba_token=BA-8JJ93859RS256852R\",\"rel\":\"approve\",\"method\":\"GET\"},{\"href\":\"https://api-m.sandbox.paypal.com/v1/billing/subscriptions/I-W0FVCUHFLDNJ\",\"rel\":\"edit\",\"method\":\"PATCH\"},{\"href\":\"https://api-m.sandbox.paypal.com/v1/billing/subscriptions/I-W0FVCUHFLDNJ\",\"rel\":\"self\",\"method\":\"GET\"}]}";//        JSONObject jsonObject = JSONObject.parseObject(字符串);//        List<Links> links = JSONObject.parseArray(jsonObject.get("links").toString(), Links.class);//        Links links1 = links.stream().filter(o -> "approve".equals(o.getRel())).findFirst()//                .orElseThrow(() -> new RuntimeException("ssss"));//        System.out.println(links1.getHref());    }}