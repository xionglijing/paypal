package com.ricoh.paypal.controller;import com.alibaba.fastjson.JSONObject;import com.paypal.api.payments.Links;import com.paypal.api.payments.Payment;import com.paypal.base.rest.PayPalRESTException;import com.ricoh.paypal.config.PaypalPaymentIntent;import com.ricoh.paypal.config.PaypalPaymentMethod;import com.ricoh.paypal.serivce.PaypalService;import com.ricoh.paypal.util.URLUtils;import com.sun.org.apache.regexp.internal.RE;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import javax.servlet.http.HttpServletRequest;/** * @author xionglijing * @date 2021/9/26 17:19 * @description */@Controller@RequestMapping("/")public class PaymentController{    public static final String PAYPAL_SUCCESS_URL = "pay/success";    public static final String PAYPAL_CANCEL_URL = "pay/cancel";    public static final String PAYPAL_BASE_URL = "https://api-m.sandbox.paypal.com";    private Logger log = LoggerFactory.getLogger(getClass());    @Autowired    private PaypalService paypalService;    @RequestMapping(method = RequestMethod.GET)    public String index(){        return "index";    }    @RequestMapping(method = RequestMethod.POST, value = "pay")    public String pay(HttpServletRequest request){        String cancelUrl = URLUtils.getBaseURl(request) + "/" + PAYPAL_CANCEL_URL;        String successUrl = URLUtils.getBaseURl(request) + "/" + PAYPAL_SUCCESS_URL;        try {            Payment payment = paypalService.createPayment(                    1000.00,                    "HKD",                    PaypalPaymentMethod.paypal,                    PaypalPaymentIntent.sale,                    "payment description 1",                    cancelUrl,                    successUrl);            System.out.println(payment.getId());            System.out.println(payment.toJSON());            for(Links links : payment.getLinks()){                if(links.getRel().equals("approval_url")){                    return "redirect:" + links.getHref();                }            }        } catch (PayPalRESTException e) {            log.error(e.getMessage());        }        return "redirect:/";    }    @RequestMapping(method = RequestMethod.GET, value = PAYPAL_CANCEL_URL)    public String cancelPay(){        return "cancel";    }    @RequestMapping(method = RequestMethod.GET, value = PAYPAL_SUCCESS_URL)    public String successPay(@RequestParam("paymentId") String paymentId, @RequestParam("PayerID") String payerId){        try {            Payment payment = paypalService.executePayment(paymentId, payerId);//            System.out.println(payment.getState());//            System.out.println(payment.getId());            System.out.println(payment.toJSON());            if(payment.getState().equals("approved")){                return "success";            }        } catch (PayPalRESTException e) {            log.error(e.getMessage());        }        return "redirect:/";    }}